from collections import deque

def is_valid(state, M, C):
    """Check if the state is valid: missionaries are not outnumbered by cannibals on either side of the river."""
    missionaries, cannibals, _ = state
    other_side_missionaries = M - missionaries
    other_side_cannibals = C - cannibals
    if missionaries < 0 or cannibals < 0 or missionaries > M or cannibals > C:
        return False
    if missionaries > 0 and missionaries < cannibals:
        return False
    if other_side_missionaries > 0 and other_side_missionaries < other_side_cannibals:
        return False
    
    return True

def get_next_states(state, M, C):
    """Generate all valid next states."""
    missionaries, cannibals, boat = state
    if boat == 1:  
        possible_moves = [(-1, 0), (-2, 0), (0, -1), (0, -2), (-1, -1)]
    else:  
        possible_moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

    next_states = []
    for m_move, c_move in possible_moves:
        next_state = (missionaries + m_move, cannibals + c_move, 1 - boat)
        if is_valid(next_state, M, C):
            next_states.append(next_state)
    return next_states

def bfs_missionaries_and_cannibals(M, C):
    """Solve the Missionaries and Cannibals problem using BFS."""
    initial_state = (M, C, 0) 
    goal_state = (0, 0, 1)  
    
    queue = deque([(initial_state, [])])
    visited = set([initial_state])
    
    while queue:
        state, path = queue.popleft()

        if state == goal_state:
            return path + [state]

        for next_state in get_next_states(state, M, C):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [state]))
    
    return None

M, C = 3, 4
print("initial to final state: ")
print([3,3,0],[0,0,0])


solution_path = bfs_missionaries_and_cannibals(M, C)
if solution_path:
    print("Solution found:")
    for step in solution_path:
        print(step)
else:
    print("solution exists")
