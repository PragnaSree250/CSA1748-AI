def print_solution(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col]:
            return False
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j]:
            return False
        i -= 1
        j -= 1
    i, j = row, col
    while i >= 0 and j < len(board):
        if board[i][j]:
            return False
        i -= 1
        j += 1
    
    return True

def solve_n_queens(board, row):
    if row >= len(board):
        print_solution(board)
        return True

    res = False
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = True
            res = solve_n_queens(board, row + 1) or res
            board[row][col] = False
    
    return res

def n_queens(n):
    board = [[False for _ in range(n)] for _ in range(n)]
    if not solve_n_queens(board, 0):
        print("Solution does not exist")

n = int(input("enter no.of queen:"));
n_queens(n)
