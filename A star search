import heapq
import matplotlib.pyplot as plt

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0 
        self.h = 0 
        self.f = 0  
        
    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar_search(start, goal, grid):
    open_list = []
    closed_list = set()
    start_node = Node(start)
    goal_node = Node(goal)
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        
        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  

        closed_list.add(current_node.position)
        
      
        for new_position in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            
           
            if (0 <= node_position[0] < len(grid) and 0 <= node_position[1] < len(grid[0])
                and grid[node_position[0]][node_position[1]] == 0 and node_position not in closed_list):
                
               
                neighbor = Node(node_position, current_node)
                neighbor.g = current_node.g + 1 
                neighbor.h = heuristic(neighbor.position, goal_node.position) 
                neighbor.f = neighbor.g + neighbor.h  
                
             
                if all(neighbor.f < node.f for node in open_list if node.position == neighbor.position):
                    heapq.heappush(open_list, neighbor)
                    
    return None 


def plot_grid_with_path(grid, path, start, goal):
    plt.figure(figsize=(6, 6))
    ax = plt.gca()
    

    for row in range(len(grid)):
        for col in range(len(grid[0])):
            if grid[row][col] == 1:
                ax.add_patch(plt.Rectangle((col, len(grid) - row - 1), 1, 1, edgecolor='black', facecolor='black'))  
            else:
                ax.add_patch(plt.Rectangle((col, len(grid) - row - 1), 1, 1, edgecolor='black', facecolor='white')) 
    
    # Plot start and goal
    ax.add_patch(plt.Rectangle((start[1], len(grid) - start[0] - 1), 1, 1, edgecolor='green', facecolor='green', label='Start'))
    ax.add_patch(plt.Rectangle((goal[1], len(grid) - goal[0] - 1), 1, 1, edgecolor='red', facecolor='red', label='Goal'))

    
    if path:
        for i in range(len(path) - 1):
            x1, y1 = path[i][1], len(grid) - path[i][0] - 1
            x2, y2 = path[i + 1][1], len(grid) - path[i + 1][0] - 1
            plt.plot([x1 + 0.5, x2 + 0.5], [y1 + 0.5, y2 + 0.5], 'bo-', linewidth=2)  

    plt.xlim(0, len(grid[0]))
    plt.ylim(0, len(grid))
    plt.gca().set_aspect('equal', adjustable='box')
    plt.title('A* Pathfinding')
    plt.axis('off')
    plt.show()


grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
goal = (4, 4)

path = astar_search(start, goal, grid)


print("Path found:")
print(path)


plot_grid_with_path(grid, path, start, goal)

output:
Path found:
[(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 4), (4, 4)]


